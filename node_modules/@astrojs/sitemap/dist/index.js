import fs from "node:fs";
const STATUS_CODE_PAGE_REGEXP = /\/[0-9]{3}\/?$/;
function generateSitemap(pages) {
  const urls = [...pages].filter((url) => !STATUS_CODE_PAGE_REGEXP.test(url));
  urls.sort((a, b) => a.localeCompare(b, "en", { numeric: true }));
  let sitemap = `<?xml version="1.0" encoding="UTF-8"?><urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`;
  for (const url of urls) {
    sitemap += `<url><loc>${url}</loc></url>`;
  }
  sitemap += `</urlset>
`;
  return sitemap;
}
function createPlugin({
  filter,
  customPages,
  canonicalURL
} = {}) {
  let config;
  return {
    name: "@astrojs/sitemap",
    hooks: {
      "astro:config:done": async ({ config: _config }) => {
        config = _config;
      },
      "astro:build:done": async ({ pages, dir }) => {
        let finalSiteUrl;
        if (canonicalURL) {
          finalSiteUrl = new URL(canonicalURL);
          finalSiteUrl.pathname += finalSiteUrl.pathname.endsWith("/") ? "" : "/";
        } else if (config.site) {
          finalSiteUrl = new URL(config.base, config.site);
        } else {
          console.warn("The Sitemap integration requires either the `site` astro.config option or `canonicalURL` integration option. Skipping.");
          return;
        }
        let pageUrls = pages.map((p) => {
          const path = finalSiteUrl.pathname + p.pathname;
          return new URL(path, finalSiteUrl).href;
        });
        if (filter) {
          pageUrls = pageUrls.filter((page) => filter(page));
        }
        if (customPages) {
          pageUrls = [...pageUrls, ...customPages];
        }
        const sitemapContent = generateSitemap(pageUrls);
        fs.writeFileSync(new URL("sitemap.xml", dir), sitemapContent);
      }
    }
  };
}
export {
  createPlugin as default
};
