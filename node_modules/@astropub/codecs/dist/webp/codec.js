import { readFileSync } from 'node:fs'
import { Module as esmEncode } from './webp-enc.js'
import { Module as esmDecode } from './webp-dec.js'

esmDecode.globalThis = {
	ImageData: class ImageData {
		constructor (data, width, height) {
			return { data, width, height }
		}
	},
}

esmDecode.run(readFileSync(new URL('./webp-dec.wasm', import.meta.url)))
esmEncode.run(readFileSync(new URL('./webp-enc.wasm', import.meta.url)))

const wasmDecode = await esmDecode.ready.then(exports => exports.decode)
const wasmEncode = await esmEncode.ready.then(exports => exports.encode)

export const decode = (data) => {
	return test(data) ? new DecodedImage(
		...Object.values(wasmDecode(data)),
	) : null
}

export const encode = (image, options) => {
	return new EncodedImage(
		type,
		wasmEncode(
			image.data,
			image.width,
			image.height,
			Object.assign({}, encodeOptions, options)
		),
		image.width,
		image.height
	)
}

export const load = (data) => {
	return test(data) ? new EncodedImage(
		type,
		new Uint8Array(data),
		...Object.values(rect(data))
	) : null
}

export const encodeOptions = {
	quality: 75,
	target_size: 0,
	target_PSNR: 0,
	method: 4,
	sns_strength: 50,
	filter_strength: 60,
	filter_sharpness: 0,
	filter_type: 1,
	partitions: 0,
	segments: 4,
	pass: 1,
	show_compressed: 0,
	preprocessing: 0,
	autofilter: 0,
	partition_limit: 0,
	alpha_compression: 1,
	alpha_filtering: 1,
	alpha_quality: 100,
	lossless: 0,
	exact: 0,
	image_hint: 0,
	emulate_jpeg_size: 0,
	thread_level: 0,
	low_memory: 0,
	near_lossless: 100,
	use_delta_palette: 0,
	use_sharp_yuv: 0,
}

export const test = (b) => [ 82, 73, 70, 70, 0, 0, 0, 0, 87, 69, 66, 80 ].every(
	(byte, index) => !byte || b[index] === byte
)

import { DecodedImage, EncodedImage, getWebpSize as rect } from '../transform/utils.js'
export { rect }
export const ext = 'webp'
export const type = 'image/webp'