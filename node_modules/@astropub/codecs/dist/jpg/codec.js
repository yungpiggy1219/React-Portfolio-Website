import { readFileSync } from 'node:fs'
import { Module as esmEncode } from './jpg-enc.js'
import { Module as esmDecode } from './jpg-dec.js'

esmDecode.globalThis = {
	ImageData: class ImageData {
		constructor (data, width, height) {
			return { data, width, height }
		}
	},
}

esmDecode.run(readFileSync(new URL('./jpg-dec.wasm', import.meta.url)))
esmEncode.run(readFileSync(new URL('./jpg-enc.wasm', import.meta.url)))

const wasmDecode = await esmDecode.ready.then(exports => exports.decode)
const wasmEncode = await esmEncode.ready.then(exports => exports.encode)

export const decode = (data) => {
	return test(data) ? new DecodedImage(
		...Object.values(wasmDecode(data)),
	) : null
}

export const encode = (image, options) => {
	return new EncodedImage(
		type,
		wasmEncode(
			image.data,
			image.width,
			image.height,
			Object.assign({}, encodeOptions, options)
		),
		image.width,
		image.height
	)
}

export const load = (data) => {
	return test(data) ? new EncodedImage(
		type,
		new Uint8Array(data),
		...Object.values(rect(data))
	) : null
}

export const encodeOptions = {
	quality: 75,
	baseline: false,
	arithmetic: false,
	progressive: true,
	optimize_coding: true,
	smoothing: 0,
	color_space: 3,
	quant_table: 3,
	trellis_multipass: false,
	trellis_opt_zero: false,
	trellis_opt_table: false,
	trellis_loops: 1,
	auto_subsample: true,
	chroma_subsample: 2,
	separate_chroma_quality: false,
	chroma_quality: 75,
}

export const test = (b) => [ 255, 216, 255 ].every(
	(byte, index) => !byte || b[index] === byte
)

import { DecodedImage, EncodedImage } from '../transform/utils.js'
import { getSize as rect } from '../transform/utils.jpg.js'
export { rect }
export const ext = 'jpg'
export const type = 'image/jpeg'