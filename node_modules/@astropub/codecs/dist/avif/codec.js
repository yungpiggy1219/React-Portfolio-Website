import { readFileSync } from 'node:fs'
import { Module as esmEncode } from './avif-enc.js'
import { Module as esmDecode } from './avif-dec.js'

esmDecode.globalThis = {
	ImageData: class ImageData {
		constructor (data, width, height) {
			return { data, width, height }
		}
	},
}

esmDecode.run(readFileSync(new URL('./avif-dec.wasm', import.meta.url)))
esmEncode.run(readFileSync(new URL('./avif-enc.wasm', import.meta.url)))

const wasmDecode = await esmDecode.ready.then(exports => exports.decode)
const wasmEncode = await esmEncode.ready.then(exports => exports.encode)

export const decode = (data) => {
	return test(data) ? new DecodedImage(
		...Object.values(wasmDecode(data)),
	) : null
}

export const encode = (image, options) => {
	return new EncodedImage(
		type,
		wasmEncode(
			image.data,
			image.width,
			image.height,
			Object.assign({}, encodeOptions, options)
		),
		image.width,
		image.height
	)
}

export const load = (data) => {
	return test(data) ? new EncodedImage(
		type,
		new Uint8Array(data),
		...Object.values(rect(data))
	) : null
}

export const encodeOptions = {
	cqLevel: 33,
	cqAlphaLevel: -1,
	denoiseLevel: 0,
	tileColsLog2: 0,
	tileRowsLog2: 0,
	speed: 6,
	subsample: 1,
	chromaDeltaQ: false,
	sharpness: 0,
	tune: 0,
}

export const test = (b) => [ 0, 0, 0, 0, 102, 116, 121, 112, 97, 118, 105, 102 ].every(
	(byte, index) => !byte || b[index] === byte
)

import { DecodedImage, EncodedImage } from '../transform/utils.js'
import { getSize as rect } from '../transform/utils.avif.js'
export { rect }
export const ext = 'avif'
export const type = 'image/avif'